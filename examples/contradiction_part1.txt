name contradiction_part1

import explosion

var A
var B

assume !B -> A ==> a
assume !B -> !A ==> b
assume !B ==> c

|- A [modus_ponens a c] ==> d
|- !A [modus_ponens a d] ==> f1
|- !A -> A -> !(A->A) [apply explosion(A, !(A -> A))] ==> f2
|- A -> !(A->A) [modus_ponens f2 f1] ==> f3
|- !(A->A) [modus_ponens f3 d] ==> f5
